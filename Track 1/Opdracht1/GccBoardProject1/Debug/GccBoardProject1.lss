
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009da  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a6  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a34  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000117c2  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000162  00000000  00000000  0001374a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000138ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003cc2  00000000  00000000  000138dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	14 d0       	rcall	.+40     	; 0xc2 <main>
  9a:	5d c0       	rjmp	.+186    	; 0x156 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  9e:	08 95       	ret

000000a0 <wait>:
	}
	else
	{
		return bytes;
	}
}
  a0:	18 16       	cp	r1, r24
  a2:	19 06       	cpc	r1, r25
  a4:	6c f4       	brge	.+26     	; 0xc0 <wait+0x20>
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	ef ec       	ldi	r30, 0xCF	; 207
  ac:	f7 e0       	ldi	r31, 0x07	; 7
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <wait+0xe>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <wait+0x14>
  b4:	00 00       	nop
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	28 17       	cp	r18, r24
  bc:	39 07       	cpc	r19, r25
  be:	a9 f7       	brne	.-22     	; 0xaa <wait+0xa>
  c0:	08 95       	ret

000000c2 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	board_init();
  c2:	ed df       	rcall	.-38     	; 0x9e <board_init>

	/* Insert application code here, after the board has been initialized. */
	//Init the first 4 registers for writing data to
	DDRA = 0b11111111;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11111111;
  c8:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b11111111;
  ca:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111;
  cc:	81 bb       	out	0x11, r24	; 17
	DDRF = 0b00000000;
  ce:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>

	//Bitnumber used for counting
	int bitNumber = 0b00000001;
	int waitLength = 1000;
	int lampjeAan = 0;
  d2:	00 e0       	ldi	r16, 0x00	; 0
  d4:	10 e0       	ldi	r17, 0x00	; 0
	DDRD = 0b11111111;
	DDRF = 0b00000000;

	//Bitnumber used for counting
	int bitNumber = 0b00000001;
	int waitLength = 1000;
  d6:	0f 2e       	mov	r0, r31
  d8:	f8 ee       	ldi	r31, 0xE8	; 232
  da:	ef 2e       	mov	r14, r31
  dc:	f3 e0       	ldi	r31, 0x03	; 3
  de:	ff 2e       	mov	r15, r31
  e0:	f0 2d       	mov	r31, r0
	DDRC = 0b11111111;
	DDRD = 0b11111111;
	DDRF = 0b00000000;

	//Bitnumber used for counting
	int bitNumber = 0b00000001;
  e2:	c1 e0       	ldi	r28, 0x01	; 1
  e4:	d0 e0       	ldi	r29, 0x00	; 0
		{
			PORTA = 0b00000000;
			PORTA = 0b00000000;
			PORTA = 0b00000000;
			PORTA = 0b00000000;
			lampjeAan = 0;
  e6:	91 2c       	mov	r9, r1
  e8:	a1 2c       	mov	r10, r1
		//PORTC = (getBitNumber(bitNumber << 2) | getBitNumber(bitNumber << 1));
		//PORTD = (getBitNumber(bitNumber << 3) | getBitNumber(bitNumber));

		if(lampjeAan == 0)
		{
			PORTA = 0b11111111;
  ea:	dd 24       	eor	r13, r13
  ec:	da 94       	dec	r13
			PORTB = 0b11111111;
			PORTC = 0b11111111;
			PORTD = 0b11111111;
			lampjeAan = 1;
  ee:	bb 24       	eor	r11, r11
  f0:	b3 94       	inc	r11
  f2:	c1 2c       	mov	r12, r1
		
		if (PINF & 1)
		{
			if(waitLength == 100)
			{
				waitLength = 1000;
  f4:	0f 2e       	mov	r0, r31
  f6:	f8 ee       	ldi	r31, 0xE8	; 232
  f8:	5f 2e       	mov	r5, r31
  fa:	f0 2d       	mov	r31, r0
  fc:	0f 2e       	mov	r0, r31
  fe:	f3 e0       	ldi	r31, 0x03	; 3
 100:	6f 2e       	mov	r6, r31
 102:	f0 2d       	mov	r31, r0
			}
			else
			{
				waitLength = 100;
 104:	0f 2e       	mov	r0, r31
 106:	f4 e6       	ldi	r31, 0x64	; 100
 108:	7f 2e       	mov	r7, r31
 10a:	f0 2d       	mov	r31, r0
 10c:	81 2c       	mov	r8, r1
		//PORTA = (getBitNumber(bitNumber) | getBitNumber(bitNumber << 3));
		//PORTB = (getBitNumber(bitNumber << 1) | getBitNumber(bitNumber << 2));
		//PORTC = (getBitNumber(bitNumber << 2) | getBitNumber(bitNumber << 1));
		//PORTD = (getBitNumber(bitNumber << 3) | getBitNumber(bitNumber));

		if(lampjeAan == 0)
 10e:	01 2b       	or	r16, r17
 110:	39 f4       	brne	.+14     	; 0x120 <main+0x5e>
		{
			PORTA = 0b11111111;
 112:	db ba       	out	0x1b, r13	; 27
			PORTB = 0b11111111;
 114:	d8 ba       	out	0x18, r13	; 24
			PORTC = 0b11111111;
 116:	d5 ba       	out	0x15, r13	; 21
			PORTD = 0b11111111;
 118:	d2 ba       	out	0x12, r13	; 18
			lampjeAan = 1;
 11a:	0b 2d       	mov	r16, r11
 11c:	1c 2d       	mov	r17, r12
 11e:	06 c0       	rjmp	.+12     	; 0x12c <main+0x6a>
		}
		else
		{
			PORTA = 0b00000000;
 120:	1b ba       	out	0x1b, r1	; 27
			PORTA = 0b00000000;
 122:	1b ba       	out	0x1b, r1	; 27
			PORTA = 0b00000000;
 124:	1b ba       	out	0x1b, r1	; 27
			PORTA = 0b00000000;
 126:	1b ba       	out	0x1b, r1	; 27
			lampjeAan = 0;
 128:	09 2d       	mov	r16, r9
 12a:	1a 2d       	mov	r17, r10
		}
		
		if (PINF & 1)
 12c:	00 9b       	sbis	0x00, 0	; 0
 12e:	09 c0       	rjmp	.+18     	; 0x142 <main+0x80>
		{
			if(waitLength == 100)
 130:	84 e6       	ldi	r24, 0x64	; 100
 132:	e8 16       	cp	r14, r24
 134:	f1 04       	cpc	r15, r1
 136:	19 f0       	breq	.+6      	; 0x13e <main+0x7c>
			{
				waitLength = 1000;
			}
			else
			{
				waitLength = 100;
 138:	e7 2c       	mov	r14, r7
 13a:	f8 2c       	mov	r15, r8
 13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0x80>
		
		if (PINF & 1)
		{
			if(waitLength == 100)
			{
				waitLength = 1000;
 13e:	e5 2c       	mov	r14, r5
 140:	f6 2c       	mov	r15, r6
			{
				waitLength = 100;
			}
		}
		
		wait(waitLength);
 142:	c7 01       	movw	r24, r14
 144:	ad df       	rcall	.-166    	; 0xa0 <wait>

		bitNumber = bitNumber << 1;
 146:	cc 0f       	add	r28, r28
 148:	dd 1f       	adc	r29, r29
		//Wraps around after bitshifting 8 times
		if(bitNumber > 128)
 14a:	c1 38       	cpi	r28, 0x81	; 129
 14c:	d1 05       	cpc	r29, r1
 14e:	fc f2       	brlt	.-66     	; 0x10e <main+0x4c>
		{
			bitNumber = 1;
 150:	cb 2d       	mov	r28, r11
 152:	dc 2d       	mov	r29, r12
 154:	dc cf       	rjmp	.-72     	; 0x10e <main+0x4c>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
