
Opdracht4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a71  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f6  00000000  00000000  00000cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a4c  00000000  00000000  000015f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001179f  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000182  00000000  00000000  00013847  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000139c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003cc2  00000000  00000000  00013a11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	14 d0       	rcall	.+40     	; 0xc2 <main>
  9a:	6d c0       	rjmp	.+218    	; 0x176 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  9e:	08 95       	ret

000000a0 <wait>:
	}
	else
	{
		return bytes;
	}
}
  a0:	18 16       	cp	r1, r24
  a2:	19 06       	cpc	r1, r25
  a4:	6c f4       	brge	.+26     	; 0xc0 <wait+0x20>
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	ef ec       	ldi	r30, 0xCF	; 207
  ac:	f7 e0       	ldi	r31, 0x07	; 7
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <wait+0xe>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <wait+0x14>
  b4:	00 00       	nop
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	28 17       	cp	r18, r24
  bc:	39 07       	cpc	r19, r25
  be:	a9 f7       	brne	.-22     	; 0xaa <wait+0xa>
  c0:	08 95       	ret

000000c2 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	board_init();
  c2:	ed df       	rcall	.-38     	; 0x9e <board_init>

	/* Insert application code here, after the board has been initialized. */
	//Init the first 4 registers for writing data to
	DDRA = 0b11111111;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11111111;
  c8:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b11111111;
  ca:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111;
  cc:	81 bb       	out	0x11, r24	; 17

	//Bitnumber used for counting
	int bitNumber = 0b00000001;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	21 e0       	ldi	r18, 0x01	; 1

		bitNumber = bitNumber << 1;
		//Wraps around after bitshifting 8 times
		if(bitNumber > 128)
		{
			bitNumber = 1;
  d4:	01 e0       	ldi	r16, 0x01	; 1
  d6:	10 e0       	ldi	r17, 0x00	; 0
	//Bitnumber used for counting
	int bitNumber = 0b00000001;

	while (1)
	{
		PORTA = (getBitNumber(bitNumber) | getBitNumber(bitNumber << 3));
  d8:	42 2f       	mov	r20, r18
  da:	9c 01       	movw	r18, r24
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
}

//If bytes has become bigger than 0b10000000 than shift it right 8 times
int getBitNumber(int bytes)
{
	if(bytes > 128)
  e8:	21 38       	cpi	r18, 0x81	; 129
  ea:	31 05       	cpc	r19, r1
  ec:	1c f0       	brlt	.+6      	; 0xf4 <main+0x32>
	{
		return bytes >> 8;
  ee:	23 2f       	mov	r18, r19
  f0:	33 0f       	add	r19, r19
  f2:	33 0b       	sbc	r19, r19
	//Bitnumber used for counting
	int bitNumber = 0b00000001;

	while (1)
	{
		PORTA = (getBitNumber(bitNumber) | getBitNumber(bitNumber << 3));
  f4:	24 2b       	or	r18, r20
  f6:	2b bb       	out	0x1b, r18	; 27
		PORTB = (getBitNumber(bitNumber << 1) | getBitNumber(bitNumber << 2));
  f8:	ec 01       	movw	r28, r24
  fa:	cc 0f       	add	r28, r28
  fc:	dd 1f       	adc	r29, r29
}

//If bytes has become bigger than 0b10000000 than shift it right 8 times
int getBitNumber(int bytes)
{
	if(bytes > 128)
  fe:	c1 38       	cpi	r28, 0x81	; 129
 100:	d1 05       	cpc	r29, r1
 102:	d4 f0       	brlt	.+52     	; 0x138 <main+0x76>
	int bitNumber = 0b00000001;

	while (1)
	{
		PORTA = (getBitNumber(bitNumber) | getBitNumber(bitNumber << 3));
		PORTB = (getBitNumber(bitNumber << 1) | getBitNumber(bitNumber << 2));
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
}

//If bytes has become bigger than 0b10000000 than shift it right 8 times
int getBitNumber(int bytes)
{
	if(bytes > 128)
 10c:	81 38       	cpi	r24, 0x81	; 129
 10e:	91 05       	cpc	r25, r1
 110:	3c f5       	brge	.+78     	; 0x160 <main+0x9e>
	int bitNumber = 0b00000001;

	while (1)
	{
		PORTA = (getBitNumber(bitNumber) | getBitNumber(bitNumber << 3));
		PORTB = (getBitNumber(bitNumber << 1) | getBitNumber(bitNumber << 2));
 112:	8d 2b       	or	r24, r29
 114:	88 bb       	out	0x18, r24	; 24
		PORTC = (getBitNumber(bitNumber << 2) | getBitNumber(bitNumber << 1));
 116:	85 bb       	out	0x15, r24	; 21
		PORTD = (getBitNumber(bitNumber << 3) | getBitNumber(bitNumber));
 118:	22 bb       	out	0x12, r18	; 18

		wait(50);
 11a:	82 e3       	ldi	r24, 0x32	; 50
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	c0 df       	rcall	.-128    	; 0xa0 <wait>

		bitNumber = bitNumber << 1;
		//Wraps around after bitshifting 8 times
		if(bitNumber > 128)
		{
			bitNumber = 1;
 120:	80 2f       	mov	r24, r16
 122:	91 2f       	mov	r25, r17
 124:	11 c0       	rjmp	.+34     	; 0x148 <main+0x86>
	int bitNumber = 0b00000001;

	while (1)
	{
		PORTA = (getBitNumber(bitNumber) | getBitNumber(bitNumber << 3));
		PORTB = (getBitNumber(bitNumber << 1) | getBitNumber(bitNumber << 2));
 126:	8c 2b       	or	r24, r28
 128:	88 bb       	out	0x18, r24	; 24
		PORTC = (getBitNumber(bitNumber << 2) | getBitNumber(bitNumber << 1));
 12a:	85 bb       	out	0x15, r24	; 21
		PORTD = (getBitNumber(bitNumber << 3) | getBitNumber(bitNumber));
 12c:	22 bb       	out	0x12, r18	; 18

		wait(50);
 12e:	82 e3       	ldi	r24, 0x32	; 50
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	b6 df       	rcall	.-148    	; 0xa0 <wait>

		bitNumber = bitNumber << 1;
 134:	ce 01       	movw	r24, r28
 136:	08 c0       	rjmp	.+16     	; 0x148 <main+0x86>
	int bitNumber = 0b00000001;

	while (1)
	{
		PORTA = (getBitNumber(bitNumber) | getBitNumber(bitNumber << 3));
		PORTB = (getBitNumber(bitNumber << 1) | getBitNumber(bitNumber << 2));
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
}

//If bytes has become bigger than 0b10000000 than shift it right 8 times
int getBitNumber(int bytes)
{
	if(bytes > 128)
 140:	81 38       	cpi	r24, 0x81	; 129
 142:	91 05       	cpc	r25, r1
 144:	1c f4       	brge	.+6      	; 0x14c <main+0x8a>
 146:	ef cf       	rjmp	.-34     	; 0x126 <main+0x64>
 148:	28 2f       	mov	r18, r24
 14a:	c6 cf       	rjmp	.-116    	; 0xd8 <main+0x16>
	int bitNumber = 0b00000001;

	while (1)
	{
		PORTA = (getBitNumber(bitNumber) | getBitNumber(bitNumber << 3));
		PORTB = (getBitNumber(bitNumber << 1) | getBitNumber(bitNumber << 2));
 14c:	8c 2f       	mov	r24, r28
 14e:	89 2b       	or	r24, r25
 150:	88 bb       	out	0x18, r24	; 24
		PORTC = (getBitNumber(bitNumber << 2) | getBitNumber(bitNumber << 1));
 152:	85 bb       	out	0x15, r24	; 21
		PORTD = (getBitNumber(bitNumber << 3) | getBitNumber(bitNumber));
 154:	22 bb       	out	0x12, r18	; 18

		wait(50);
 156:	82 e3       	ldi	r24, 0x32	; 50
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	a2 df       	rcall	.-188    	; 0xa0 <wait>

		bitNumber = bitNumber << 1;
 15c:	ce 01       	movw	r24, r28
 15e:	f4 cf       	rjmp	.-24     	; 0x148 <main+0x86>
	int bitNumber = 0b00000001;

	while (1)
	{
		PORTA = (getBitNumber(bitNumber) | getBitNumber(bitNumber << 3));
		PORTB = (getBitNumber(bitNumber << 1) | getBitNumber(bitNumber << 2));
 160:	8d 2f       	mov	r24, r29
 162:	89 2b       	or	r24, r25
 164:	88 bb       	out	0x18, r24	; 24
		PORTC = (getBitNumber(bitNumber << 2) | getBitNumber(bitNumber << 1));
 166:	85 bb       	out	0x15, r24	; 21
		PORTD = (getBitNumber(bitNumber << 3) | getBitNumber(bitNumber));
 168:	22 bb       	out	0x12, r18	; 18

		wait(50);
 16a:	82 e3       	ldi	r24, 0x32	; 50
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	98 df       	rcall	.-208    	; 0xa0 <wait>

		bitNumber = bitNumber << 1;
		//Wraps around after bitshifting 8 times
		if(bitNumber > 128)
		{
			bitNumber = 1;
 170:	80 2f       	mov	r24, r16
 172:	91 2f       	mov	r25, r17
 174:	e9 cf       	rjmp	.-46     	; 0x148 <main+0x86>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
