
Opdracht2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000156  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000001ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000940  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000871  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062d  00000000  00000000  00001441  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000112de  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b3  00000000  00000000  00012db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00012e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000002e4  00000000  00000000  00012e91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	36 d0       	rcall	.+108    	; 0x130 <main>
  c4:	46 c0       	rjmp	.+140    	; 0x152 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
int CompareValue = 10;
int TenthValue = 0;

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	6c f4       	brge	.+26     	; 0xe8 <wait+0x20>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	ef ec       	ldi	r30, 0xCF	; 207
  d4:	f7 e0       	ldi	r31, 0x07	; 7
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <wait+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <wait+0x14>
  dc:	00 00       	nop
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	28 17       	cp	r18, r24
  e4:	39 07       	cpc	r19, r25
  e6:	a9 f7       	brne	.-22     	; 0xd2 <wait+0xa>
  e8:	08 95       	ret

000000ea <__vector_10>:
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

ISR( TIMER2_OVF_vect )
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
	TenthValue++; // Increment counter
  f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  fc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 106:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <timer2Init>:
// Initialize timer2
//

void timer2Init( void )
{
	OCR2 = CompareValue; // Compare value of counter 2
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <CompareValue>
 11c:	83 bd       	out	0x23, r24	; 35
	TIMSK |= 0b01000000; // T2 compare match interrupt enable
 11e:	87 b7       	in	r24, 0x37	; 55
 120:	80 64       	ori	r24, 0x40	; 64
 122:	87 bf       	out	0x37, r24	; 55
	SREG |= 0b0100000; // turn_on intr all
 124:	8f b7       	in	r24, 0x3f	; 63
 126:	80 62       	ori	r24, 0x20	; 32
 128:	8f bf       	out	0x3f, r24	; 63
	TCCR2 = 0b00011111; // Initialize T2: ext.counting, rising edge
 12a:	8f e1       	ldi	r24, 0x1F	; 31
 12c:	85 bd       	out	0x25, r24	; 37
 12e:	08 95       	ret

00000130 <main>:
	// compare output mode, CTC, RUN
}

int main( void )
{
	DDRD &= 0b01000000; // set PORTD.7 for input
 130:	81 b3       	in	r24, 0x11	; 17
 132:	80 74       	andi	r24, 0x40	; 64
 134:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF; // set PORTB for output (shows countregister)
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF; // set PORTC for output (shows tenth value)
 13a:	87 bb       	out	0x17, r24	; 23
	timer2Init();
 13c:	ed df       	rcall	.-38     	; 0x118 <timer2Init>
	while (1)
	{
		PORTA = TCNT2; // show value counter 2
		PORTB = TenthValue; // show value tenth counter
 13e:	c2 e0       	ldi	r28, 0x02	; 2
 140:	d1 e0       	ldi	r29, 0x01	; 1
	DDRA = 0xFF; // set PORTB for output (shows countregister)
	DDRB = 0xFF; // set PORTC for output (shows tenth value)
	timer2Init();
	while (1)
	{
		PORTA = TCNT2; // show value counter 2
 142:	84 b5       	in	r24, 0x24	; 36
 144:	8b bb       	out	0x1b, r24	; 27
		PORTB = TenthValue; // show value tenth counter
 146:	88 81       	ld	r24, Y
 148:	88 bb       	out	0x18, r24	; 24
		wait(10); // every 10 ms
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	bc df       	rcall	.-136    	; 0xc8 <wait>
	}
 150:	f8 cf       	rjmp	.-16     	; 0x142 <main+0x12>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
