
Opdracht1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000204  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c93  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a0c  00000000  00000000  0000101f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b3  00000000  00000000  00001a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  000022e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007942  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ff  00000000  00000000  00009d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00009f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002c5e  00000000  00000000  00009f7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	be c0       	rjmp	.+380    	; 0x182 <__vector_1>
   6:	00 00       	nop
   8:	c6 c0       	rjmp	.+396    	; 0x196 <__vector_2>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e0       	ldi	r30, 0x04	; 4
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	7b d0       	rcall	.+246    	; 0x1aa <main>
  b4:	a5 c0       	rjmp	.+330    	; 0x200 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_command>:
	lcd_command(0x80);
 }

 void lcd_clear(void)
 {
	lcd_command(0x1);
  b8:	98 2f       	mov	r25, r24
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	95 bb       	out	0x15, r25	; 21
  be:	ab 9a       	sbi	0x15, 3	; 21
  c0:	ef ec       	ldi	r30, 0xCF	; 207
  c2:	f7 e0       	ldi	r31, 0x07	; 7
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_command+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_command+0x12>
  ca:	00 00       	nop
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	95 bb       	out	0x15, r25	; 21
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	85 bb       	out	0x15, r24	; 21
  da:	ab 9a       	sbi	0x15, 3	; 21
  dc:	8f ec       	ldi	r24, 0xCF	; 207
  de:	97 e0       	ldi	r25, 0x07	; 7
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x28>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_command+0x2e>
  e6:	00 00       	nop
  e8:	15 ba       	out	0x15, r1	; 21
  ea:	08 95       	ret

000000ec <lcd_writeChar>:
  ec:	98 2f       	mov	r25, r24
  ee:	90 7f       	andi	r25, 0xF0	; 240
  f0:	95 bb       	out	0x15, r25	; 21
  f2:	95 b3       	in	r25, 0x15	; 21
  f4:	9c 60       	ori	r25, 0x0C	; 12
  f6:	95 bb       	out	0x15, r25	; 21
  f8:	ef ec       	ldi	r30, 0xCF	; 207
  fa:	f7 e0       	ldi	r31, 0x07	; 7
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_writeChar+0x10>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_writeChar+0x16>
 102:	00 00       	nop
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	95 bb       	out	0x15, r25	; 21
 108:	f0 e1       	ldi	r31, 0x10	; 16
 10a:	8f 9f       	mul	r24, r31
 10c:	c0 01       	movw	r24, r0
 10e:	11 24       	eor	r1, r1
 110:	85 bb       	out	0x15, r24	; 21
 112:	85 b3       	in	r24, 0x15	; 21
 114:	8c 60       	ori	r24, 0x0C	; 12
 116:	85 bb       	out	0x15, r24	; 21
 118:	8f ec       	ldi	r24, 0xCF	; 207
 11a:	97 e0       	ldi	r25, 0x07	; 7
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_writeChar+0x30>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_writeChar+0x36>
 122:	00 00       	nop
 124:	15 ba       	out	0x15, r1	; 21
 126:	08 95       	ret

00000128 <lcd_writeLine>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
 12e:	88 81       	ld	r24, Y
 130:	88 23       	and	r24, r24
 132:	29 f0       	breq	.+10     	; 0x13e <lcd_writeLine+0x16>
 134:	21 96       	adiw	r28, 0x01	; 1
 136:	da df       	rcall	.-76     	; 0xec <lcd_writeChar>
 138:	89 91       	ld	r24, Y+
 13a:	81 11       	cpse	r24, r1
 13c:	fc cf       	rjmp	.-8      	; 0x136 <lcd_writeLine+0xe>
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <lcd_init>:
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	b8 df       	rcall	.-144    	; 0xb8 <lcd_command>
 148:	88 e2       	ldi	r24, 0x28	; 40
 14a:	b6 df       	rcall	.-148    	; 0xb8 <lcd_command>
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	b4 df       	rcall	.-152    	; 0xb8 <lcd_command>
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	b2 df       	rcall	.-156    	; 0xb8 <lcd_command>
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	b0 cf       	rjmp	.-160    	; 0xb8 <lcd_command>
 158:	08 95       	ret

0000015a <lcd_set_cursor>:
 }

 void lcd_set_cursor()
 {
	lcd_command(0x18);
 15a:	88 e1       	ldi	r24, 0x18	; 24
 15c:	ad cf       	rjmp	.-166    	; 0xb8 <lcd_command>
 15e:	08 95       	ret

00000160 <wait>:
#include <LCD.h>
#include <string.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 160:	18 16       	cp	r1, r24
 162:	19 06       	cpc	r1, r25
 164:	6c f4       	brge	.+26     	; 0x180 <wait+0x20>
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	ef ec       	ldi	r30, 0xCF	; 207
 16c:	f7 e0       	ldi	r31, 0x07	; 7
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <wait+0xe>
 172:	00 c0       	rjmp	.+0      	; 0x174 <wait+0x14>
 174:	00 00       	nop
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	28 17       	cp	r18, r24
 17c:	39 07       	cpc	r19, r25
 17e:	a9 f7       	brne	.-22     	; 0x16a <wait+0xa>
 180:	08 95       	ret

00000182 <__vector_1>:
		_delay_ms( 1 );
	}
}

ISR( INT0_vect )
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1

}
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_2>:

ISR( INT1_vect )
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1

}
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <main>:

int main( void )
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	a6 97       	sbiw	r28, 0x26	; 38
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x0;
 1c2:	15 ba       	out	0x15, r1	; 21

	DDRC = 0xFF;
 1c4:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xF0;
 1c6:	80 ef       	ldi	r24, 0xF0	; 240
 1c8:	81 bb       	out	0x11, r24	; 17

	EICRA |= 0x0B;			// INT1 falling edge, INT0 rising edge
 1ca:	ea e6       	ldi	r30, 0x6A	; 106
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	8b 60       	ori	r24, 0x0B	; 11
 1d2:	80 83       	st	Z, r24
	EIMSK |= 0x03;			// Enable INT1 & INT0
 1d4:	89 b7       	in	r24, 0x39	; 57
 1d6:	83 60       	ori	r24, 0x03	; 3
 1d8:	89 bf       	out	0x39, r24	; 57

	sei();		
 1da:	78 94       	sei

	lcd_init();
 1dc:	b3 df       	rcall	.-154    	; 0x144 <lcd_init>
	
	//lcd_writeChar('A');
	unsigned char makker[] = "Timon is heerlijk - Timon is heerlijk";
 1de:	86 e2       	ldi	r24, 0x26	; 38
 1e0:	e0 e0       	ldi	r30, 0x00	; 0
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	de 01       	movw	r26, r28
 1e6:	11 96       	adiw	r26, 0x01	; 1
 1e8:	01 90       	ld	r0, Z+
 1ea:	0d 92       	st	X+, r0
 1ec:	8a 95       	dec	r24
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x3e>
	lcd_writeLine(makker);
 1f0:	ce 01       	movw	r24, r28
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	99 df       	rcall	.-206    	; 0x128 <lcd_writeLine>
	//lcd_clear();
	//lcd_writeLine(makker);

	while (1)
	{
		wait(500);
 1f6:	84 ef       	ldi	r24, 0xF4	; 244
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	b2 df       	rcall	.-156    	; 0x160 <wait>
		lcd_set_cursor();
 1fc:	ae df       	rcall	.-164    	; 0x15a <lcd_set_cursor>
	}		    
 1fe:	fb cf       	rjmp	.-10     	; 0x1f6 <main+0x4c>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
