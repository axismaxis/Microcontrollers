
Opdracht3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000024c  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  000002f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1e  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089f  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000511  00000000  00000000  0000165d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000076c9  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000249  00000000  00000000  0000932d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00009576  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000240  00000000  00000000  000095a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	7e c0       	rjmp	.+252    	; 0x102 <__vector_1>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	99 d0       	rcall	.+306    	; 0x1f6 <main>
  c4:	c1 c0       	rjmp	.+386    	; 0x248 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	6c f4       	brge	.+26     	; 0xe8 <wait+0x20>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	ef ec       	ldi	r30, 0xCF	; 207
  d4:	f7 e0       	ldi	r31, 0x07	; 7
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <wait+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <wait+0x14>
  dc:	00 00       	nop
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	28 17       	cp	r18, r24
  e4:	39 07       	cpc	r19, r25
  e6:	a9 f7       	brne	.-22     	; 0xd2 <wait+0xa>
  e8:	08 95       	ret

000000ea <display>:
	}
}

void display(int digit)
{
	if(digit > 16)
  ea:	81 31       	cpi	r24, 0x11	; 17
  ec:	91 05       	cpc	r25, r1
  ee:	1c f0       	brlt	.+6      	; 0xf6 <display+0xc>
	{
		PORTD = digits[16];
  f0:	89 ef       	ldi	r24, 0xF9	; 249
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	08 95       	ret
	}
	else
	{
		PORTC = digits[digit];
  f6:	fc 01       	movw	r30, r24
  f8:	e0 50       	subi	r30, 0x00	; 0
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 81       	ld	r24, Z
  fe:	85 bb       	out	0x15, r24	; 21
 100:	08 95       	ret

00000102 <__vector_1>:
	}
}

int count = 0;
ISR( INT0_vect )
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	0b b6       	in	r0, 0x3b	; 59
 10e:	0f 92       	push	r0
 110:	2f 93       	push	r18
 112:	3f 93       	push	r19
 114:	4f 93       	push	r20
 116:	5f 93       	push	r21
 118:	6f 93       	push	r22
 11a:	7f 93       	push	r23
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	af 93       	push	r26
 122:	bf 93       	push	r27
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
	count++;
 128:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 12c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 136:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	if(PIND & 0b00000010)
 13a:	81 9b       	sbis	0x10, 1	; 16
 13c:	04 c0       	rjmp	.+8      	; 0x146 <__vector_1+0x44>
	{
		count = 0;
 13e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 142:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	}
	display(count);
 146:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 14a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 14e:	cd df       	rcall	.-102    	; 0xea <display>
	wait(10);
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	b9 df       	rcall	.-142    	; 0xc8 <wait>
}
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	7f 91       	pop	r23
 164:	6f 91       	pop	r22
 166:	5f 91       	pop	r21
 168:	4f 91       	pop	r20
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0b be       	out	0x3b, r0	; 59
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_2>:

ISR( INT1_vect )
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	0b b6       	in	r0, 0x3b	; 59
 188:	0f 92       	push	r0
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	count--;
 1a2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1a6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 1b0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	if(PIND & 0b00000001)
 1b4:	80 9b       	sbis	0x10, 0	; 16
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <__vector_2+0x44>
	{
		count = 0;
 1b8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 1bc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	}
	display(count);
 1c0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1c4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 1c8:	90 df       	rcall	.-224    	; 0xea <display>
	wait(10);
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	7c df       	rcall	.-264    	; 0xc8 <wait>
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0b be       	out	0x3b, r0	; 59
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <main>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	DDRC = 0xFF;
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xF0;
 1fa:	80 ef       	ldi	r24, 0xF0	; 240
 1fc:	81 bb       	out	0x11, r24	; 17
	

	EICRA |= 0x0B;			// INT1 falling edge, INT0 rising edge
 1fe:	ea e6       	ldi	r30, 0x6A	; 106
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	8b 60       	ori	r24, 0x0B	; 11
 206:	80 83       	st	Z, r24
	EIMSK |= 0x03;			// Enable INT1 & INT0
 208:	89 b7       	in	r24, 0x39	; 57
 20a:	83 60       	ori	r24, 0x03	; 3
 20c:	89 bf       	out	0x39, r24	; 57

	sei();		
 20e:	78 94       	sei

	while (1)
	{
		display(count);
 210:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 214:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 218:	68 df       	rcall	.-304    	; 0xea <display>
		count++;
 21a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 21e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 228:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		wait(1000);
 22c:	88 ee       	ldi	r24, 0xE8	; 232
 22e:	93 e0       	ldi	r25, 0x03	; 3
 230:	4b df       	rcall	.-362    	; 0xc8 <wait>
		if(count > 18)
 232:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 236:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 23a:	43 97       	sbiw	r24, 0x13	; 19
 23c:	4c f3       	brlt	.-46     	; 0x210 <main+0x1a>
		{
			count = 0;
 23e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 242:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 246:	e4 cf       	rjmp	.-56     	; 0x210 <main+0x1a>

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
